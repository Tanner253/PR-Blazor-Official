@page "/carnivores"
@using PrehistoricRealism.Data.Services
@using PrehistoricRealism.Data
@inject DinoServices objDinoService

<h3>Carnivore Information</h3>

<h1>Carnivore information</h1>
@if (query == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Diet</th>
                <th>Pack Limits</th>
                <th>Image</th>
                <th>
                    <NavLink class="nav-link" href="/createdino">
                        <span class="oi oi-plus" aria-hidden="true"></span> Add New
                </NavLink>
                </th>
            </tr>
        </thead>
        <tbody>
  
            @foreach (var dino in query)
            {
                <tr>
                    <td>@dino.Name</td>
                    <td>@dino.Diet</td>
                    <td>@dino.PackLimits</td>
                    <td>@dino.Image</td>
                    <td>
                        <a class="nav-link" href="EditDino/@dino.ID">
                            <span class="oi oi-pencil" aria-hidden="true"> </span> Edit
                        </a>
                        <a class="nav-link" href="DeleteDino/@dino.ID">
                            <span class="oi oi-trash" aria-hidden="true"> </span> Delete
                        </a>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}
@code {
    List<DinosaurInfo> dinoObj;
    IOrderedEnumerable<DinosaurInfo> query;


    protected override async Task OnInitializedAsync()
    {
        dinoObj = await objDinoService.GetDinosaurs();
               query = dinoObj.Where(n => n.Diet == DinosaurInfo.Food.Carnivore).OrderBy(n => n.Name);



    }
 

}
